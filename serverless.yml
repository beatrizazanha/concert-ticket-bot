service: pokedolar-bot

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1

  # stage can be passed as parameter in deploy with sls deploy -stage <stage>. Default is dev
  stage: ${opt:stage, "dev"}

  # service level envvars
  environment:
    STAGE: ${self:provider.stage}

  # Number of days that the function logs will be avaiable on CloudWatch
  logRetentionInDays: 30

package: # Optional deployment packaging configuration
  exclude:
    - "envvars.json"
    - ".env"
    - "package-lock.json"
    - "*.html"
    - "*.zip"
  excludeDevDependencies: true

plugins:
  - serverless-offline

layers:
  chromium:
    package:
      artifact: chromium.zip

functions:
  pokebot:
    handler: lambda.handler
    name: pokebot-${self:provider.stage} # NOTE keep stage in function name to avoid duplicate resources names
    description:
    memorySize: 1024 # Memory for this specific function.  Overrides the default set above.
    timeout: 60 # Timeout for this specific function.  Overrides the default set above.
    role: ${file(envvars.json):LAMBDA_ROLE_ARN} # Default role for lambda functions

    # Function level envvars
    environment:
      SLACK_TOKEN: ${file(envvars.json):SLACK_TOKEN}
      TWITTER_USERNAME: ${file(envvars.json):TWITTER_USERNAME}
      TWITTER_PWD: ${file(envvars.json):TWITTER_PWD}
      SLACK_CHANNEL: ${file(envvars.json):SLACK_CHANNEL}
      BUCKET_NAME: ${file(envvars.json):BUCKET_NAME}
      BUCKET_KEY: ${file(envvars.json):BUCKET_KEY}

    events:
      - schedule: cron(15,45 11-20 * * ? *)

    layers:
      - !Ref ChromiumLambdaLayer
